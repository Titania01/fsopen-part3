{"version":3,"sources":["components/Note.jsx","components/Notification.jsx","components/Footer.jsx","services/notes.js","App.jsx","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","request","axios","get","nonExisting","id","date","then","response","data","concat","getAll","initialNotes","toggleImportanceOf","url","find","n","changedNote","newObject","put","update","returnedNote","map","catch","error","setTimeout","filter","console","log","length","notesToShow","i","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","post","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f538cb54.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n  <li className='note'>\n    {note.content}\n  <button onClick={toggleImportance}>{label}</button>\n  </li>\n  )\n}\nexport default Note","const Notification = ({ message }) => {\n  if (message === null) {\n    return message\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\nexport default Notification","const Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\nexport default Footer","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\n\nexport const getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n  // return axios.get(baseUrl)\n}\n\nexport const create = newObject => {\n  const request=axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nexport const update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n","import React, { useState, useEffect } from 'react'\nimport axios from \"axios\"\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from \"./components/Footer\"\n\n\nimport {getAll, update, create} from './services/notes'\n\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error message...')\n\n  useEffect(() => {\n    getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important}\n\n    update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n    axios.put(url, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note: response.data))\n    })\n    console.log(`importance of ${id} needs to be toggled`)\n  }\n\n  const hook = ()=> {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fufilled')\n        setNotes(response.data)\n      })\n    }\n  \n    useEffect(hook, [])\n\n  console.log(\"render\", notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n\n    create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n\n    axios\n      .post('http://localhost:3001/notes', noteObject)\n      .then(response => {\n        console.log(response)\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ?notes\n  :notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n          key={i} \n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n        value={newNote}\n        onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx'\nimport './index.css'\n\n\n// const promise = axios.get('http://localhost:3001/notes')\n\n// promise.then(response => {\n//   console.log(response)\n// })\n\n\n  \n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n\n\n\n// const promise2 = axios.get('http://localhost:3001/foobar')\n// console.log(promise2)\n\n\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only JavaScript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}